Write the following Code for me, while doing that take into consideration the newest standards and best practices. I’m programming an online flashcard application.
In my tech stack I’m using Next.js with an Express.js backend. For my css I’m using the styled component's library.
In my Frontend all Components are sorted with the atomic design approach in mind. This means I use the Next.js app router, which refers to templates, which include organism, which include less complicated molecules, which include less complicated atoms.
Every component should have an index.tsx file for logic. This should import the types.ts file for types, and the styles.ts file as “import * as SC from "./styles";” for all styled components.
Every file should follow these ESLint rules:
“extends: compat.extends("next/core-web-vitals", "eslint:recommended"),

    languageOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
    },

    rules: {
        "no-var": "error",
        "prefer-const": "error",
        "prefer-arrow-callback": "error",
        "arrow-body-style": ["error", "as-needed"],
        "func-style": ["error", "expression"],

        "no-unused-vars": ["warn", {
            argsIgnorePattern: "^_",
        }],

        "no-console": "warn",
    },”
While styling the components, you should use the SC ThemeProvider. Here is an example on how to access it in your styles.ts “color: ${({ theme }) => theme.textPrimary};” When choosing colors you should look at these dark and light themes available through the ThemeProvider: “export const lightTheme: themeType = {
  primary: "#2563eb",        // Blue-600
  secondary: "#fbbf24",      // Amber-400
  background: "#f9fafb",     // Gray-50
  surface: "#ffffff",        // White
  textPrimary: "#1e293b",    // Slate-800
  textSecondary: "#64748b",  // Slate-400
  border: "#e5e7eb",         // Gray-200
  highlight: "#bae6fd",      // Sky-200
  accept: "#22c55e",         // Green-500
  deny: "#ef4444",           // Red-500
  fontSizes: {
    small: "0.875rem",
    medium: "1.25rem",
    large: "1.5rem",
    xlarge: "1.875rem",
  },
};

export const darkTheme: themeType = {
  primary: "#3b82f6",        // Blue-500
  secondary: "#fbbf24",      // Amber-400
  background: "#18181b",     // Zinc-900
  surface: "#23232a",        // Slightly lighter than background
  textPrimary: "#f4f4f5",    // Zinc-100
  textSecondary: "#a1a1aa",  // Zinc-400
  border: "#27272a",         // Zinc-800
  highlight: "#2563eb",      // Blue-600
  accept: "#22d3ee",         // Cyan-400
  deny: "#ef4444",           // Red-500
  fontSizes: {
    small: "0.875rem",
    medium: "1.25rem",
    large: "1.5rem",
    xlarge: "1.875rem",
  },
};”
Finally, while taking all this into consideration I want you to code the following component:
a register page template designed like a modern sign-up page.
The text fields should be in the middle of the page leaving space to either side of the page
It should include the following fields a username, an e-mail address (optional) and a password and a confirm password.
The se fields should check of type, like username should only include Latin alphabet and numerals and the symbols “-” or “_”
An email address should be checked if the user entry typed in an email address (and remove and empty spaces like “ ”)
A password should have 8 characters including symbols, numbers, upper- and lower-case letters.
The password confirm should check if the user typed in the same string as in the password field.
If the user has done something wrong, the border of the text field should light up red with a detailed enough but still one or two sentences short description of what the user has done wrong and how to fix it below it. (use color “deny”)
If the user has filled a field correctly the border of the text field should light up green with a green checkmark beside it (use color accept)
If the user tries to submit the form while some fields are still empty, those fields should also be marked red the massage below stating “you need to fill out this field”
Inside the text field there should be a text of what comes in it, like “e-mail” or “password”
The type of this page should be a form. All above should be correct before the user is able to submit a form.
There should also be a button linking to the login-page if the user already has an account

It’s important that you will now only create 3 files; index.tsx, types.ts, styles.ts

{
  "openapi": "3.0.0",
  "info": {
    "title": "WebEngineering Flashcards API",
    "version": "1.0.0",
    "description": "A REST API for managing flashcards and folders",
    "contact": {
      "name": "API Support",
      "email": "support@karteikarten-app.com"
    }
  },
  "servers": [
    {
      "url": "https://web-engineering-karteikarten.vercel.app",
      "description": "Production server (Vercel)"
    },
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token in format: Bearer <token>"
      }
    },
    "schemas": {
      "Card": {
        "type": "object",
        "required": [
          "title",
          "question",
          "answer",
          "folderId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the flashcard",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the flashcard",
            "example": "JavaScript Closures"
          },
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Question on the flashcard",
            "example": "What is a closure in JavaScript?"
          },
          "answer": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Answer on the flashcard",
            "example": "A closure is a function that has access to variables from its outer scope."
          },
          "currentLearningLevel": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "description": "Current learning level (0-5)",
            "example": 2
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "example": "2024-05-01T08:00:00.000Z"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Tags for categorization",
            "example": [
              "javascript",
              "frontend",
              "advanced"
            ]
          },
          "folderId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the associated folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        }
      },
      "Folder": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the folder",
            "example": "JavaScript Basics"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the parent folder",
            "example": "parent-folder-uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "example": "2024-05-01T08:00:00.000Z"
          },
          "lastOpenedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last opened date",
            "example": "2024-05-15T14:30:00.000Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "fail",
              "error"
            ],
            "description": "Error status (fail = client error, error = server error)",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Something went wrong"
          }
        }
      }
    }
  },
  "paths": {
    "/api/auth/check-username": {
      "post": {
        "summary": "Check username availability",
        "description": "Checks if a username is available for registration",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "description": "Username to check (letters, numbers, underscores only)",
                    "example": "john_doe123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Username availability check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "True if username is available, false if taken",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation Error",
                      "example": "Validation failed: Only letters, numbers, underscores allowed"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Database error while checking username availability"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/check-email": {
      "post": {
        "summary": "Check email availability",
        "description": "Checks if an email address is available for registration",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address to check",
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email availability check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "True if email is available, false if taken",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation Error",
                      "example": "Validation failed: email: Invalid email"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Database error while checking email availability"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with username, optional email, and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "description": "Unique username (letters, numbers, underscores only)",
                    "example": "john_doe123"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Optional email address",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 100,
                    "description": "User password",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "username": {
                          "type": "string",
                          "example": "john_doe123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "nullable": true,
                          "example": "john.doe@example.com"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-05-01T10:30:00.000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-05-01T10:30:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or username/email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Email already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during registration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Database error during user registration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user with username/email and password, returns JWT token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "usernameOrEmail",
                  "password"
                ],
                "properties": {
                  "usernameOrEmail": {
                    "type": "string",
                    "description": "Username or email address",
                    "example": "john_doe123"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 100,
                    "description": "User password",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT authentication token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "username": {
                          "type": "string",
                          "example": "john_doe123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation failed: usernameOrEmail: Required, password: Required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid credentials"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Server error during login"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "summary": "Get user profile",
        "description": "Retrieves the authenticated user's profile information",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "User's unique identifier",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "username": {
                      "type": "string",
                      "maxLength": 20,
                      "description": "User's username",
                      "example": "john_doe123"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "maxLength": 255,
                      "description": "User's email address (optional)",
                      "example": "john.doe@example.com"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account creation timestamp",
                      "example": "2024-05-01T10:30:00.000Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last profile update timestamp",
                      "example": "2024-05-15T14:20:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Unauthorized - No valid token provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Id not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error retrieving profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Database error while fetching user profile"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/delete": {
      "delete": {
        "summary": "Delete your own user account",
        "description": "Deletes the authenticated user's account",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized or invalid token"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/update": {
      "patch": {
        "summary": "Update your profile (username, email, or password)",
        "description": "Change username, email, or password. Requires current password for verification.",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "example": "new_username"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "new.email@example.com"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "NewPassword123!"
                  },
                  "currentPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "CurrentPassword!"
                  }
                },
                "required": [
                  "currentPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Validation error or no changes provided"
          },
          "401": {
            "description": "Unauthorized or wrong password"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/valid-login": {
      "get": {
        "summary": "Check if the current login is valid",
        "description": "Validates the current login session using the provided JWT",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Valid login session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "True if the login is valid, false otherwise",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid or expired token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during validation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Server error during login validation"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "Logs out the authenticated user, invalidating the JWT token",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Unauthorized - No valid token provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during logout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Server error during logout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cards": {
      "get": {
        "summary": "Get all cards with advanced filtering and sorting options",
        "description": "Search all cards system-wide with various filtering options",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "folderId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by specific folder"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by tags (comma-separated)",
            "example": "javascript,frontend"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Filter by title (partial match)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of cards per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of cards to skip for pagination"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "currentLearningLevel"
              ]
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered cards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Card"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new card",
        "description": "Creates a new flashcard and assigns it to a folder",
        "tags": [
          "Cards"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "question",
                  "answer",
                  "folderId"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Card title",
                    "example": "JavaScript Closures"
                  },
                  "question": {
                    "type": "string",
                    "description": "Question on the front side",
                    "example": "What is a closure in JavaScript?"
                  },
                  "answer": {
                    "type": "string",
                    "description": "Answer on the back side",
                    "example": "A closure is a function that has access to variables from its outer scope..."
                  },
                  "folderId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the associated folder"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags for categorization",
                    "example": [
                      "javascript",
                      "closures",
                      "functions"
                    ]
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "default": 1,
                    "description": "Current learning level (1-5)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards/{id}": {
      "get": {
        "summary": "Get single card",
        "description": "Loads a specific card by its ID",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the card"
          }
        ],
        "responses": {
          "200": {
            "description": "Card successfully loaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update card",
        "description": "Updates an existing card (partial updates possible)",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the card"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Neuer Card title"
                  },
                  "question": {
                    "type": "string",
                    "description": "New question"
                  },
                  "answer": {
                    "type": "string",
                    "description": "New answer"
                  },
                  "folderId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "New folder ID"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "New tags"
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "New learning level"
                  }
                },
                "example": {
                  "title": "JavaScript Closures - Erweitert",
                  "currentLearningLevel": 3,
                  "tags": [
                    "javascript",
                    "closures",
                    "advanced"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete card",
        "description": "Permanently deletes a card from the system",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the card to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Card successfully deleted"
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders": {
      "get": {
        "summary": "Get all folders with pagination",
        "description": "Loads all available folders with optional pagination",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of folders per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of folders to skip for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all folders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new folder",
        "description": "Creates a new folder (can also be a subfolder)",
        "tags": [
          "Folders"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Folder name",
                    "example": "JavaScript Grundlagen"
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the parent folder (optional for subfolders)",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folder successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folder": {
                          "$ref": "#/components/schemas/Folder"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Übergeordneter Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/search": {
      "get": {
        "summary": "Search folders by name",
        "description": "Searches folders based on their name (partial match)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search term for folder name",
            "example": "JavaScript"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of search results per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of results to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Search term missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/root": {
      "get": {
        "summary": "Get all root folders",
        "description": "Loads all folders without parent folders (root level)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of folders per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of folders to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of root folders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}": {
      "get": {
        "summary": "Get single folder",
        "description": "Loads a specific folder by its ID",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the folder"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder successfully loaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folder": {
                          "$ref": "#/components/schemas/Folder"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update folder",
        "description": "Updates an existing folder (partial updates possible)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the folder"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Neuer Folder name"
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "New parent folder ID",
                    "nullable": true
                  }
                },
                "example": {
                  "name": "JavaScript Fortgeschritten",
                  "parentId": null
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Folder successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folder": {
                          "$ref": "#/components/schemas/Folder"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete folder",
        "description": "Permanently deletes a folder (cascades to all contained cards)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the folder to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Folder successfully deleted"
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/children": {
      "get": {
        "summary": "Get subfolders",
        "description": "Loads all direct subfolders eines spezifischen Ordners",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the parent folder"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of subfolders per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of subfolders to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subfolders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Übergeordneter Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/cards": {
      "get": {
        "summary": "Get all cards in a folder",
        "description": "Loads all flashcards assigned to a specific folder",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of cards per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Anzahl der zu überspringenden Karten"
          }
        ],
        "responses": {
          "200": {
            "description": "List of cards in the folder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Card"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new card in a folder",
        "description": "Creates a new flashcard and automatically assigns it to the specified folder",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder, dem die Karte zugeordnet wird"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "question",
                  "answer"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Card title",
                    "example": "React Hooks"
                  },
                  "question": {
                    "type": "string",
                    "description": "Question on the front side",
                    "example": "Was ist der Unterschied zwischen useState und useEffect?"
                  },
                  "answer": {
                    "type": "string",
                    "description": "Answer on the back side",
                    "example": "useState verwaltet lokalen State, useEffect führt Seiteneffekte aus..."
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags for categorization",
                    "example": [
                      "react",
                      "hooks",
                      "frontend"
                    ]
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "default": 1,
                    "description": "Current learning level (1-5)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card successfully created in folder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/cards/{cardId}": {
      "put": {
        "summary": "Karte in einem Update folder",
        "description": "Aktualisiert eine Karte und validiert, dass sie zum angegebenen Ordner gehört",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder"
          },
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID der zu aktualisierenden Karte"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Neuer Card title"
                  },
                  "question": {
                    "type": "string",
                    "description": "New question"
                  },
                  "answer": {
                    "type": "string",
                    "description": "New answer"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "New tags"
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "New learning level"
                  }
                },
                "example": {
                  "title": "React Hooks - Erweitert",
                  "currentLearningLevel": 3,
                  "tags": [
                    "react",
                    "hooks",
                    "advanced"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data oder Karte gehört nicht zum Ordner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ordner oder Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Karte aus einem Delete folder",
        "description": "Löscht eine Karte und validiert, dass sie zum angegebenen Ordner gehört",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder"
          },
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID der zu löschenden Karte"
          }
        ],
        "responses": {
          "204": {
            "description": "Card successfully deleted"
          },
          "400": {
            "description": "Karte gehört nicht zum angegebenen Ordner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ordner oder Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}
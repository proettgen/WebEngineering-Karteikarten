{
  "openapi": "3.0.0",
  "info": {
    "title": "WebEngineering Flashcards API",
    "version": "1.0.0",
    "description": "A REST API for managing flashcards and folders",
    "contact": {
      "name": "API Support",
      "email": "support@karteikarten-app.com"
    }
  },
  "servers": [
    {
      "url": "https://web-engineering-karteikarten.vercel.app",
      "description": "Production server (Vercel)"
    },
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token in format: Bearer <token>"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": [
          "id",
          "username",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the user",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "username": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "Username",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "Email address (optional)",
            "example": "john@example.com"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation date",
            "example": "2024-05-01T08:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update date",
            "example": "2024-05-15T14:30:00.000Z"
          }
        }
      },
      "LoginInput": {
        "type": "object",
        "required": [
          "usernameOrEmail",
          "password"
        ],
        "properties": {
          "usernameOrEmail": {
            "type": "string",
            "description": "Username or email address",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Password",
            "example": "password123"
          }
        }
      },
      "RegisterInput": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "Username",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "Email address (optional)",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Password",
            "example": "password123"
          }
        }
      },
      "ProfileUpdateInput": {
        "type": "object",
        "required": [
          "currentPassword"
        ],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "New username",
            "example": "newusername"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "New email address",
            "example": "new@example.com"
          },
          "newPassword": {
            "type": "string",
            "minLength": 6,
            "description": "New password",
            "example": "newpassword123"
          },
          "currentPassword": {
            "type": "string",
            "description": "Current password for verification",
            "example": "currentpassword123"
          }
        }
      },
      "Card": {
        "type": "object",
        "required": [
          "id",
          "title",
          "question",
          "answer",
          "folderId",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the flashcard",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the flashcard",
            "example": "JavaScript Closures"
          },
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Question on the flashcard",
            "example": "What is a closure in JavaScript?"
          },
          "answer": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Answer on the flashcard",
            "example": "A closure is a function that has access to variables from its outer scope."
          },
          "currentLearningLevel": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "description": "Current learning level (0-5)",
            "example": 2
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "example": "2024-05-01T08:00:00.000Z"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Tags for categorization",
            "example": [
              "javascript",
              "frontend",
              "advanced"
            ]
          },
          "folderId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the associated folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        }
      },
      "CardInput": {
        "type": "object",
        "required": [
          "title",
          "question",
          "answer",
          "folderId"
        ],
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the flashcard",
            "example": "JavaScript Closures"
          },
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Question on the flashcard",
            "example": "What is a closure in JavaScript?"
          },
          "answer": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Answer on the flashcard",
            "example": "A closure is a function that has access to variables from its outer scope."
          },
          "currentLearningLevel": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "description": "Current learning level (0-5)",
            "example": 0
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Tags for categorization",
            "example": [
              "javascript",
              "frontend"
            ]
          },
          "folderId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the associated folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        }
      },
      "CardUpdateInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the flashcard",
            "example": "JavaScript Closures"
          },
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Question on the flashcard",
            "example": "What is a closure in JavaScript?"
          },
          "answer": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Answer on the flashcard",
            "example": "A closure is a function that has access to variables from its outer scope."
          },
          "currentLearningLevel": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "description": "Current learning level (0-5)",
            "example": 2
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Tags for categorization",
            "example": [
              "javascript",
              "frontend",
              "advanced"
            ]
          }
        }
      },
      "Folder": {
        "type": "object",
        "required": [
          "id",
          "name",
          "userId",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the folder",
            "example": "JavaScript Basics"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the parent folder (null for root folders)",
            "example": "parent-folder-uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the folder owner",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "example": "2024-05-01T08:00:00.000Z"
          },
          "lastOpenedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last opened date",
            "example": "2024-05-15T14:30:00.000Z"
          }
        }
      },
      "FolderInput": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the folder",
            "example": "JavaScript Basics"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the parent folder (null for root folder)",
            "example": "parent-folder-uuid"
          }
        }
      },
      "FolderUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the folder",
            "example": "JavaScript Advanced"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the parent folder",
            "example": "parent-folder-uuid"
          }
        }
      },
      "Analytics": {
        "type": "object",
        "required": [
          "id",
          "userId",
          "studySession",
          "totalCards",
          "correctAnswers",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the analytics record",
            "example": "analytics-123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user this analytics belongs to",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "studySession": {
            "type": "integer",
            "minimum": 1,
            "description": "Study session number",
            "example": 5
          },
          "totalCards": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of cards studied in this session",
            "example": 20
          },
          "correctAnswers": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of correct answers in this session",
            "example": 15
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the analytics record was created",
            "example": "2024-01-20T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the analytics record was last updated",
            "example": "2024-01-20T10:30:00.000Z"
          }
        }
      },
      "CreateAnalyticsRequest": {
        "type": "object",
        "required": [
          "studySession",
          "totalCards",
          "correctAnswers"
        ],
        "properties": {
          "studySession": {
            "type": "integer",
            "minimum": 1,
            "description": "Study session number",
            "example": 5
          },
          "totalCards": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of cards studied in this session",
            "example": 20
          },
          "correctAnswers": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of correct answers in this session",
            "example": 15
          }
        }
      },
      "UpdateAnalyticsRequest": {
        "type": "object",
        "properties": {
          "studySession": {
            "type": "integer",
            "minimum": 1,
            "description": "Study session number",
            "example": 6
          },
          "totalCards": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of cards studied in this session",
            "example": 25
          },
          "correctAnswers": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of correct answers in this session",
            "example": 20
          }
        }
      },
      "AnalyticsResponse": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/Analytics"
          }
        }
      },
      "AnalyticsListResponse": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Analytics"
            }
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Operation completed successfully"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Login successful"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Registration successful"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "ProfileResponse": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "CardListResponse": {
        "type": "object",
        "required": [
          "status",
          "results",
          "limit",
          "offset",
          "total",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "results": {
            "type": "integer",
            "description": "Number of cards returned",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of cards requested",
            "example": 20
          },
          "offset": {
            "type": "integer",
            "description": "Number of cards skipped",
            "example": 0
          },
          "total": {
            "type": "integer",
            "description": "Total number of cards available",
            "example": 50
          },
          "data": {
            "type": "object",
            "properties": {
              "cards": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      },
      "CardResponse": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "card": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        }
      },
      "FolderListResponse": {
        "type": "object",
        "required": [
          "status",
          "results",
          "limit",
          "offset",
          "total",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "results": {
            "type": "integer",
            "description": "Number of folders returned",
            "example": 5
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of folders requested",
            "example": 20
          },
          "offset": {
            "type": "integer",
            "description": "Number of folders skipped",
            "example": 0
          },
          "total": {
            "type": "integer",
            "description": "Total number of folders available",
            "example": 15
          },
          "data": {
            "type": "object",
            "properties": {
              "folders": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      },
      "FolderResponse": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ],
            "description": "Success status",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "folder": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "fail"
            ],
            "description": "Validation error status",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "description": "Validation error message",
            "example": "Validation failed"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "Field name with error",
                  "example": "title"
                },
                "message": {
                  "type": "string",
                  "description": "Error message for the field",
                  "example": "Title is required"
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "fail",
              "error"
            ],
            "description": "Error status (fail = client error, error = server error)",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Something went wrong"
          }
        }
      }
    }
  },
  "paths": {
    "/api/analytics": {
      "get": {
        "summary": "Get user analytics",
        "description": "Retrieves the authenticated user's learning statistics. Creates a new analytics record if none exists.",
        "tags": [
          "Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "analytics": {
                          "$ref": "#/components/schemas/Analytics"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create user analytics",
        "description": "Creates a new analytics record for the authenticated user",
        "tags": [
          "Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "totalLearningTime": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "description": "Total learning time in seconds"
                  },
                  "totalCardsLearned": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "description": "Total number of cards learned"
                  },
                  "totalCorrect": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "description": "Total correct answers"
                  },
                  "totalWrong": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "description": "Total wrong answers"
                  },
                  "resets": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "description": "Number of learning resets"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Analytics created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "analytics": {
                          "$ref": "#/components/schemas/Analytics"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Analytics already exist for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user analytics",
        "description": "Updates the authenticated user's analytics record",
        "tags": [
          "Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "totalLearningTime": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Total learning time in seconds"
                  },
                  "totalCardsLearned": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Total number of cards learned"
                  },
                  "totalCorrect": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Total correct answers"
                  },
                  "totalWrong": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Total wrong answers"
                  },
                  "resets": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Number of learning resets"
                  }
                },
                "minProperties": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analytics updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "analytics": {
                          "$ref": "#/components/schemas/Analytics"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Analytics not found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user analytics",
        "description": "Deletes the authenticated user's analytics record",
        "tags": [
          "Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Analytics deleted successfully"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Analytics not found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/check-username": {
      "post": {
        "summary": "Check username availability",
        "description": "Checks if a username is available for registration",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "description": "Username to check (letters, numbers, underscores only)",
                    "example": "john_doe123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Username availability check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "True if username is available, false if taken",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation Error",
                      "example": "Validation failed: Only letters, numbers, underscores allowed"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Database error while checking username availability"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/check-email": {
      "post": {
        "summary": "Check email availability",
        "description": "Checks if an email address is available for registration",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address to check",
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email availability check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "True if email is available, false if taken",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation Error",
                      "example": "Validation failed: email: Invalid email"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Database error while checking email availability"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with username, optional email, and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "description": "Unique username (letters, numbers, underscores only)",
                    "example": "john_doe123"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Optional email address",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 100,
                    "description": "User password",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "username": {
                          "type": "string",
                          "example": "john_doe123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "nullable": true,
                          "example": "john.doe@example.com"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-05-01T10:30:00.000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-05-01T10:30:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or username/email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Email already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during registration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Database error during user registration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user with username/email and password, returns JWT token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "usernameOrEmail",
                  "password"
                ],
                "properties": {
                  "usernameOrEmail": {
                    "type": "string",
                    "description": "Username or email address",
                    "example": "john_doe123"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 100,
                    "description": "User password",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT authentication token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "username": {
                          "type": "string",
                          "example": "john_doe123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Validation failed: usernameOrEmail: Required, password: Required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid credentials"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Server error during login"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "summary": "Get user profile",
        "description": "Retrieves the authenticated user's profile information",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "User's unique identifier",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "username": {
                      "type": "string",
                      "maxLength": 20,
                      "description": "User's username",
                      "example": "john_doe123"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "maxLength": 255,
                      "description": "User's email address (optional)",
                      "example": "john.doe@example.com"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account creation timestamp",
                      "example": "2024-05-01T10:30:00.000Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last profile update timestamp",
                      "example": "2024-05-15T14:20:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Unauthorized - No valid token provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Id not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error retrieving profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Database error while fetching user profile"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/delete": {
      "delete": {
        "summary": "Delete your own user account",
        "description": "Deletes the authenticated user's account",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized or invalid token"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/update": {
      "patch": {
        "summary": "Update your profile (username, email, or password)",
        "description": "Change username, email, or password. Requires current password for verification.",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "example": "new_username"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "new.email@example.com"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "NewPassword123!"
                  },
                  "currentPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "CurrentPassword!"
                  }
                },
                "required": [
                  "currentPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Validation error or no changes provided"
          },
          "401": {
            "description": "Unauthorized or wrong password"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/valid-login": {
      "get": {
        "summary": "Check if the current login is valid",
        "description": "Validates the current login session using the provided JWT",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Valid login session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "validLogin": {
                      "type": "boolean",
                      "description": "True if the login is valid, false otherwise",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Invalid or expired token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during validation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Server error during login validation"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "Logs out the authenticated user, invalidating the JWT token",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Unauthorized - No valid token provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during logout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Server error during logout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cards": {
      "get": {
        "summary": "Get all user cards with advanced filtering and sorting options",
        "description": "Retrieves all cards belonging to the authenticated user with various filtering options",
        "tags": [
          "Cards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "folderId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by specific folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter by tags (comma-separated)",
            "example": "javascript,frontend"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Filter by title (partial match)",
            "example": "JavaScript"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of cards per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of cards to skip for pagination"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "currentLearningLevel",
                "title"
              ]
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Cards retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardListResponse"
                },
                "example": {
                  "status": "success",
                  "results": 15,
                  "limit": 20,
                  "offset": 0,
                  "total": 50,
                  "data": {
                    "cards": [
                      {
                        "id": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a",
                        "title": "JavaScript Closures",
                        "question": "What is a closure in JavaScript?",
                        "answer": "A closure is a function that has access to variables from its outer scope.",
                        "currentLearningLevel": 2,
                        "createdAt": "2024-05-01T08:00:00.000Z",
                        "tags": [
                          "javascript",
                          "frontend",
                          "advanced"
                        ],
                        "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "invalidLimit": {
                    "summary": "Invalid limit parameter",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "limit",
                          "message": "Limit must be between 1 and 100"
                        }
                      ]
                    }
                  },
                  "invalidSortField": {
                    "summary": "Invalid sort field",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "sortBy",
                          "message": "Sort field must be one of: createdAt, currentLearningLevel, title"
                        }
                      ]
                    }
                  },
                  "invalidUUID": {
                    "summary": "Invalid folderId format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "folderId",
                          "message": "Invalid UUID format"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Invalid or expired authentication token"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found (when filtering by folderId)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Folder with ID 'c6f8fb2b-a33f-46da-941d-9832b6212395' not found or you don't have access to it"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while retrieving cards"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new card",
        "description": "Creates a new flashcard and assigns it to a folder. The user must own the specified folder.",
        "tags": [
          "Cards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardInput"
              },
              "example": {
                "title": "JavaScript Closures",
                "question": "What is a closure in JavaScript?",
                "answer": "A closure is a function that has access to variables from its outer scope and can access those variables even after the outer function has finished executing.",
                "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395",
                "tags": [
                  "javascript",
                  "closures",
                  "functions"
                ],
                "currentLearningLevel": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "card": {
                      "id": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a",
                      "title": "JavaScript Closures",
                      "question": "What is a closure in JavaScript?",
                      "answer": "A closure is a function that has access to variables from its outer scope and can access those variables even after the outer function has finished executing.",
                      "currentLearningLevel": 0,
                      "createdAt": "2024-05-01T08:00:00.000Z",
                      "tags": [
                        "javascript",
                        "closures",
                        "functions"
                      ],
                      "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "missingRequired": {
                    "summary": "Missing required fields",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "title",
                          "message": "Title is required"
                        },
                        {
                          "field": "question",
                          "message": "Question is required"
                        }
                      ]
                    }
                  },
                  "invalidLength": {
                    "summary": "Field length validation",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "title",
                          "message": "Title must be between 1 and 200 characters"
                        }
                      ]
                    }
                  },
                  "invalidLearningLevel": {
                    "summary": "Invalid learning level",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "currentLearningLevel",
                          "message": "Learning level must be between 0 and 5"
                        }
                      ]
                    }
                  },
                  "invalidUUID": {
                    "summary": "Invalid folder ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "folderId",
                          "message": "Invalid UUID format for folder ID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to create cards in this folder"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Folder with ID 'c6f8fb2b-a33f-46da-941d-9832b6212395' not found"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate card title in folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "A card with the title 'JavaScript Closures' already exists in this folder"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while creating the card"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards/{id}": {
      "get": {
        "summary": "Get single card",
        "description": "Retrieves a specific card by its ID. User must own the card's folder.",
        "tags": [
          "Cards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the card",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          }
        ],
        "responses": {
          "200": {
            "description": "Card successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "card": {
                      "id": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a",
                      "title": "JavaScript Closures",
                      "question": "What is a closure in JavaScript?",
                      "answer": "A closure is a function that has access to variables from its outer scope.",
                      "currentLearningLevel": 2,
                      "createdAt": "2024-05-01T08:00:00.000Z",
                      "tags": [
                        "javascript",
                        "frontend",
                        "advanced"
                      ],
                      "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid card ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "example": {
                  "status": "fail",
                  "message": "Validation failed",
                  "errors": [
                    {
                      "field": "id",
                      "message": "Invalid UUID format for card ID"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to access this card"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Card with ID '1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a' not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while retrieving the card"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update card",
        "description": "Updates an existing card (partial updates supported). User must own the card's folder.",
        "tags": [
          "Cards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the card",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardUpdateInput"
              },
              "example": {
                "title": "JavaScript Closures - Advanced",
                "currentLearningLevel": 3,
                "tags": [
                  "javascript",
                  "closures",
                  "advanced",
                  "functions"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "card": {
                      "id": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a",
                      "title": "JavaScript Closures - Advanced",
                      "question": "What is a closure in JavaScript?",
                      "answer": "A closure is a function that has access to variables from its outer scope.",
                      "currentLearningLevel": 3,
                      "createdAt": "2024-05-01T08:00:00.000Z",
                      "tags": [
                        "javascript",
                        "closures",
                        "advanced",
                        "functions"
                      ],
                      "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "invalidLength": {
                    "summary": "Field length validation",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "title",
                          "message": "Title must be between 1 and 200 characters"
                        }
                      ]
                    }
                  },
                  "invalidLearningLevel": {
                    "summary": "Invalid learning level",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "currentLearningLevel",
                          "message": "Learning level must be between 0 and 5"
                        }
                      ]
                    }
                  },
                  "emptyUpdate": {
                    "summary": "No fields to update",
                    "value": {
                      "status": "fail",
                      "message": "At least one field must be provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to update this card"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Card with ID '1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a' not found"
                }
              }
            }
          },
          "409": {
            "description": "Conflict with existing card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "A card with the title 'JavaScript Closures - Advanced' already exists in this folder"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while updating the card"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete card",
        "description": "Permanently deletes a card from the system. User must own the card's folder. This action cannot be undone.",
        "tags": [
          "Cards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the card to delete",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          }
        ],
        "responses": {
          "204": {
            "description": "Card successfully deleted (no content returned)"
          },
          "400": {
            "description": "Invalid card ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "example": {
                  "status": "fail",
                  "message": "Validation failed",
                  "errors": [
                    {
                      "field": "id",
                      "message": "Invalid UUID format for card ID"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to delete this card"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Card with ID '1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a' not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while deleting the card"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders": {
      "get": {
        "summary": "Get all folders with pagination",
        "description": "Retrieves all folders belonging to the authenticated user with optional pagination",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of folders per page",
            "example": 20
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of folders to skip for pagination",
            "example": 0
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "createdAt",
                "lastOpenedAt"
              ]
            },
            "description": "Field to sort by",
            "example": "name"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order",
            "example": "asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Folders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListResponse"
                },
                "example": {
                  "status": "success",
                  "results": 5,
                  "limit": 20,
                  "offset": 0,
                  "total": 15,
                  "data": {
                    "folders": [
                      {
                        "id": "c6f8fb2b-a33f-46da-941d-9832b6212395",
                        "name": "JavaScript Basics",
                        "parentId": null,
                        "userId": "550e8400-e29b-41d4-a716-446655440000",
                        "createdAt": "2024-05-01T08:00:00.000Z",
                        "lastOpenedAt": "2024-05-15T14:30:00.000Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "invalidLimit": {
                    "summary": "Invalid limit parameter",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "limit",
                          "message": "Limit must be between 1 and 100"
                        }
                      ]
                    }
                  },
                  "invalidSortField": {
                    "summary": "Invalid sort field",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "sortBy",
                          "message": "Sort field must be one of: name, createdAt, lastOpenedAt"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Invalid or expired authentication token"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while retrieving folders"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new folder",
        "description": "Creates a new folder (can be a root folder or subfolder). User automatically becomes the owner.",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderInput"
              },
              "example": {
                "name": "JavaScript Advanced",
                "parentId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folder successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "folder": {
                      "id": "d7f9fc3c-b44f-57bc-9d8e-1f2g3h4i5j6k",
                      "name": "JavaScript Advanced",
                      "parentId": "c6f8fb2b-a33f-46da-941d-9832b6212395",
                      "userId": "550e8400-e29b-41d4-a716-446655440000",
                      "createdAt": "2024-05-16T10:30:00.000Z",
                      "lastOpenedAt": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "missingName": {
                    "summary": "Missing required name field",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "name",
                          "message": "Folder name is required"
                        }
                      ]
                    }
                  },
                  "invalidLength": {
                    "summary": "Folder name too long",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "name",
                          "message": "Folder name must be between 1 and 100 characters"
                        }
                      ]
                    }
                  },
                  "invalidParentId": {
                    "summary": "Invalid parent folder ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "parentId",
                          "message": "Invalid UUID format for parent folder ID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to parent folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to create subfolders in this folder"
                }
              }
            }
          },
          "404": {
            "description": "Parent folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Parent folder with ID 'c6f8fb2b-a33f-46da-941d-9832b6212395' not found"
                }
              }
            }
          },
          "409": {
            "description": "Folder name already exists in parent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "A folder with the name 'JavaScript Advanced' already exists in this location"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while creating the folder"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/search": {
      "get": {
        "summary": "Search folders by name",
        "description": "Searches folders based on their name (partial match)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search term for folder name",
            "example": "JavaScript"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of search results per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of results to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Search term missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/root": {
      "get": {
        "summary": "Get all root folders",
        "description": "Loads all folders without parent folders (root level)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of folders per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of folders to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of root folders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}": {
      "get": {
        "summary": "Get single folder",
        "description": "Loads a specific folder by its ID. Only returns folders owned by the authenticated user.",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder successfully loaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "folder": {
                      "id": "c6f8fb2b-a33f-46da-941d-9832b6212395",
                      "name": "JavaScript Basics",
                      "parentId": null,
                      "userId": "550e8400-e29b-41d4-a716-446655440000",
                      "createdAt": "2024-05-01T08:00:00.000Z",
                      "lastOpenedAt": "2024-05-15T14:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid folder ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "example": {
                  "status": "fail",
                  "message": "Validation failed",
                  "errors": [
                    {
                      "field": "id",
                      "message": "Invalid UUID format"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found or not owned by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Folder with ID c6f8fb2b-a33f-46da-941d-9832b6212395 not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while retrieving the folder"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update folder",
        "description": "Updates an existing folder owned by the authenticated user (partial updates supported)",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "Updated folder name",
                    "example": "JavaScript Advanced"
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "New parent folder ID (null for root folder)",
                    "nullable": true,
                    "example": "d7f9fc3c-b44f-57bc-9d8e-1f2g3h4i5j6k"
                  }
                }
              },
              "example": {
                "name": "JavaScript Advanced",
                "parentId": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Folder successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "folder": {
                      "id": "c6f8fb2b-a33f-46da-941d-9832b6212395",
                      "name": "JavaScript Advanced",
                      "parentId": null,
                      "userId": "550e8400-e29b-41d4-a716-446655440000",
                      "createdAt": "2024-05-01T08:00:00.000Z",
                      "lastOpenedAt": "2024-05-16T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "invalidName": {
                    "summary": "Invalid folder name",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "name",
                          "message": "Folder name must be between 1 and 100 characters"
                        }
                      ]
                    }
                  },
                  "invalidParentId": {
                    "summary": "Invalid parent folder ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "parentId",
                          "message": "Invalid UUID format for parent folder ID"
                        }
                      ]
                    }
                  },
                  "invalidFolderId": {
                    "summary": "Invalid folder ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "id",
                          "message": "Invalid UUID format"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to parent folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "New parent folder not found or access denied"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found or not owned by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "folderNotFound": {
                    "summary": "Folder not found",
                    "value": {
                      "status": "fail",
                      "message": "Folder with ID c6f8fb2b-a33f-46da-941d-9832b6212395 not found"
                    }
                  },
                  "parentNotFound": {
                    "summary": "Parent folder not found",
                    "value": {
                      "status": "fail",
                      "message": "Parent folder with ID d7f9fc3c-b44f-57bc-9d8e-1f2g3h4i5j6k not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Folder name already exists in parent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "A folder with the name 'JavaScript Advanced' already exists in this location"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while updating the folder"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete folder",
        "description": "Permanently deletes a folder owned by the authenticated user (cascades to all contained cards and subfolders)",
        "tags": [
          "Folders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique ID of the folder to delete",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        ],
        "responses": {
          "204": {
            "description": "Folder successfully deleted"
          },
          "400": {
            "description": "Invalid folder ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "example": {
                  "status": "fail",
                  "message": "Validation failed",
                  "errors": [
                    {
                      "field": "id",
                      "message": "Invalid UUID format"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found or not owned by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Folder with ID c6f8fb2b-a33f-46da-941d-9832b6212395 not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while deleting the folder"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/children": {
      "get": {
        "summary": "Get subfolders",
        "description": "Loads all direct subfolders eines spezifischen Ordners",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the parent folder"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of subfolders per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of subfolders to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subfolders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Übergeordneter Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/cards": {
      "get": {
        "summary": "Get all cards in a folder",
        "description": "Loads all flashcards assigned to a specific folder with pagination support",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of cards per page"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of cards to skip for pagination"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "currentLearningLevel",
                "title"
              ]
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of cards in the folder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Card"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  },
                  "$ref": "#/components/schemas/CardListResponse"
                },
                "example": {
                  "status": "success",
                  "results": 8,
                  "limit": 20,
                  "offset": 0,
                  "total": 8,
                  "data": {
                    "cards": [
                      {
                        "id": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a",
                        "title": "JavaScript Closures",
                        "question": "What is a closure in JavaScript?",
                        "answer": "A closure is a function that has access to variables from its outer scope.",
                        "currentLearningLevel": 2,
                        "createdAt": "2024-05-01T08:00:00.000Z",
                        "tags": [
                          "javascript",
                          "frontend"
                        ],
                        "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "invalidUUID": {
                    "summary": "Invalid folder ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "id",
                          "message": "Invalid UUID format for folder ID"
                        }
                      ]
                    }
                  },
                  "invalidPagination": {
                    "summary": "Invalid pagination parameters",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "limit",
                          "message": "Limit must be between 1 and 100"
                        },
                        {
                          "field": "offset",
                          "message": "Offset must be 0 or greater"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to access this folder"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Folder with ID 'c6f8fb2b-a33f-46da-941d-9832b6212395' not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while retrieving cards"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create new card in a folder",
        "description": "Creates a new flashcard and automatically assigns it to the specified folder. The user must own the folder.",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder where the card will be created",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "question",
                  "answer"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Card title",
                    "example": "React Hooks",
                    "minLength": 1,
                    "maxLength": 200
                  },
                  "question": {
                    "type": "string",
                    "description": "Question on the front side",
                    "example": "What is the difference between useState and useEffect?",
                    "minLength": 1,
                    "maxLength": 2000
                  },
                  "answer": {
                    "type": "string",
                    "description": "Answer on the back side",
                    "example": "useState manages local component state, while useEffect handles side effects like API calls, subscriptions, and DOM manipulation.",
                    "minLength": 1,
                    "maxLength": 5000
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "description": "Tags for categorization",
                    "example": [
                      "react",
                      "hooks",
                      "frontend"
                    ],
                    "maxItems": 20
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 5,
                    "default": 0,
                    "description": "Current learning level (0-5, where 0 is new/unlearned)"
                  }
                }
              },
              "example": {
                "title": "React Hooks",
                "question": "What is the difference between useState and useEffect?",
                "answer": "useState manages local component state, while useEffect handles side effects like API calls, subscriptions, and DOM manipulation.",
                "tags": [
                  "react",
                  "hooks",
                  "frontend"
                ],
                "currentLearningLevel": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card successfully created in folder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  },
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "card": {
                      "id": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a",
                      "title": "React Hooks",
                      "question": "What is the difference between useState and useEffect?",
                      "answer": "useState manages local component state, while useEffect handles side effects like API calls, subscriptions, and DOM manipulation.",
                      "currentLearningLevel": 0,
                      "createdAt": "2024-05-01T08:00:00.000Z",
                      "tags": [
                        "react",
                        "hooks",
                        "frontend"
                      ],
                      "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "missingRequired": {
                    "summary": "Missing required fields",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "title",
                          "message": "Title is required"
                        },
                        {
                          "field": "question",
                          "message": "Question is required"
                        },
                        {
                          "field": "answer",
                          "message": "Answer is required"
                        }
                      ]
                    }
                  },
                  "invalidLength": {
                    "summary": "Field length validation",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "title",
                          "message": "Title must be between 1 and 200 characters"
                        },
                        {
                          "field": "question",
                          "message": "Question must be between 1 and 2000 characters"
                        }
                      ]
                    }
                  },
                  "invalidLearningLevel": {
                    "summary": "Invalid learning level",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "currentLearningLevel",
                          "message": "Learning level must be between 0 and 5"
                        }
                      ]
                    }
                  },
                  "invalidUUID": {
                    "summary": "Invalid folder ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "id",
                          "message": "Invalid UUID format for folder ID"
                        }
                      ]
                    }
                  },
                  "tooManyTags": {
                    "summary": "Too many tags",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "tags",
                          "message": "Maximum 20 tags allowed per card"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to create cards in this folder"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Folder with ID 'c6f8fb2b-a33f-46da-941d-9832b6212395' not found"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate card title in folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "A card with the title 'React Hooks' already exists in this folder"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while creating the card"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/folders/{id}/cards/{cardId}": {
      "put": {
        "summary": "Update card in a folder",
        "description": "Updates a flashcard and validates that it belongs to the specified folder. The user must own the folder.",
        "tags": [
          "Folders",
          "Cards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          },
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the card to update",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 200,
                    "description": "Updated card title",
                    "example": "React Hooks - Advanced"
                  },
                  "question": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 2000,
                    "description": "Updated question",
                    "example": "What are the rules of React Hooks and how do they work?"
                  },
                  "answer": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 5000,
                    "description": "Updated answer",
                    "example": "React Hooks follow two main rules: 1) Only call hooks at the top level, 2) Only call hooks from React functions."
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "maxItems": 20,
                    "description": "Updated tags",
                    "example": [
                      "react",
                      "hooks",
                      "advanced",
                      "rules"
                    ]
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 5,
                    "description": "Updated learning level",
                    "example": 3
                  }
                }
              },
              "example": {
                "title": "React Hooks - Advanced",
                "question": "What are the rules of React Hooks and how do they work?",
                "answer": "React Hooks follow two main rules: 1) Only call hooks at the top level, 2) Only call hooks from React functions.",
                "tags": [
                  "react",
                  "hooks",
                  "advanced",
                  "rules"
                ],
                "currentLearningLevel": 3
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                },
                "example": {
                  "status": "success",
                  "data": {
                    "card": {
                      "id": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a",
                      "title": "React Hooks - Advanced",
                      "question": "What are the rules of React Hooks and how do they work?",
                      "answer": "React Hooks follow two main rules: 1) Only call hooks at the top level, 2) Only call hooks from React functions.",
                      "currentLearningLevel": 3,
                      "createdAt": "2024-05-01T08:00:00.000Z",
                      "tags": [
                        "react",
                        "hooks",
                        "advanced",
                        "rules"
                      ],
                      "folderId": "c6f8fb2b-a33f-46da-941d-9832b6212395"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or card doesn't belong to folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "invalidLength": {
                    "summary": "Field length validation",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "title",
                          "message": "Title must be between 1 and 200 characters"
                        },
                        {
                          "field": "question",
                          "message": "Question must be between 1 and 2000 characters"
                        }
                      ]
                    }
                  },
                  "invalidLearningLevel": {
                    "summary": "Invalid learning level",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "currentLearningLevel",
                          "message": "Learning level must be between 0 and 5"
                        }
                      ]
                    }
                  },
                  "cardNotInFolder": {
                    "summary": "Card doesn't belong to folder",
                    "value": {
                      "status": "fail",
                      "message": "Card does not belong to the specified folder"
                    }
                  },
                  "invalidUUID": {
                    "summary": "Invalid ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "id",
                          "message": "Invalid UUID format for folder ID"
                        },
                        {
                          "field": "cardId",
                          "message": "Invalid UUID format for card ID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to update cards in this folder"
                }
              }
            }
          },
          "404": {
            "description": "Folder or card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "folderNotFound": {
                    "summary": "Folder not found",
                    "value": {
                      "status": "fail",
                      "message": "Folder with ID 'c6f8fb2b-a33f-46da-941d-9832b6212395' not found"
                    }
                  },
                  "cardNotFound": {
                    "summary": "Card not found",
                    "value": {
                      "status": "fail",
                      "message": "Card with ID '1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a' not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Duplicate card title in folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "A card with the title 'React Hooks - Advanced' already exists in this folder"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while updating the card"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete card from folder",
        "description": "Deletes a flashcard and validates that it belongs to the specified folder. The user must own the folder.",
        "tags": [
          "Folders",
          "Cards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          },
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the card to delete",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          }
        ],
        "responses": {
          "204": {
            "description": "Card successfully deleted"
          },
          "400": {
            "description": "Card doesn't belong to the specified folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "cardNotInFolder": {
                    "summary": "Card doesn't belong to folder",
                    "value": {
                      "status": "fail",
                      "message": "Card does not belong to the specified folder"
                    }
                  },
                  "invalidUUID": {
                    "summary": "Invalid ID format",
                    "value": {
                      "status": "fail",
                      "message": "Validation failed",
                      "errors": [
                        {
                          "field": "id",
                          "message": "Invalid UUID format for folder ID"
                        },
                        {
                          "field": "cardId",
                          "message": "Invalid UUID format for card ID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "Authentication token is required"
                }
              }
            }
          },
          "403": {
            "description": "Access denied to folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "fail",
                  "message": "You don't have permission to delete cards from this folder"
                }
              }
            }
          },
          "404": {
            "description": "Folder or card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "folderNotFound": {
                    "summary": "Folder not found",
                    "value": {
                      "status": "fail",
                      "message": "Folder with ID 'c6f8fb2b-a33f-46da-941d-9832b6212395' not found"
                    }
                  },
                  "cardNotFound": {
                    "summary": "Card not found",
                    "value": {
                      "status": "fail",
                      "message": "Card with ID '1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a' not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "status": "error",
                  "message": "An unexpected error occurred while deleting the card"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}
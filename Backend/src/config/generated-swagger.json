{
  "openapi": "3.0.0",
  "info": {
    "title": "WebEngineering Flashcards API",
    "version": "1.0.0",
    "description": "A REST API for managing flashcards and folders",
    "contact": {
      "name": "API Support",
      "email": "support@karteikarten-app.com"
    }
  },
  "servers": [
    {
      "url": "https://web-engineering-karteikarten.vercel.app",
      "description": "Production server (Vercel)"
    },
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token in format: Bearer <token>"
      }
    },
    "schemas": {
      "Card": {
        "type": "object",
        "required": [
          "title",
          "question",
          "answer",
          "folderId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the flashcard",
            "example": "1a2b3c4d-5e6f-47ab-8c9d-0e1f2a3b4c5a"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Title of the flashcard",
            "example": "JavaScript Closures"
          },
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Question on the flashcard",
            "example": "What is a closure in JavaScript?"
          },
          "answer": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Answer on the flashcard",
            "example": "A closure is a function that has access to variables from its outer scope."
          },
          "currentLearningLevel": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "description": "Current learning level (0-5)",
            "example": 2
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "example": "2024-05-01T08:00:00.000Z"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Tags for categorization",
            "example": [
              "javascript",
              "frontend",
              "advanced"
            ]
          },
          "folderId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the associated folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          }
        }
      },
      "Folder": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the folder",
            "example": "c6f8fb2b-a33f-46da-941d-9832b6212395"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Name of the folder",
            "example": "JavaScript Basics"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of the parent folder",
            "example": "parent-folder-uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date",
            "example": "2024-05-01T08:00:00.000Z"
          },
          "lastOpenedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last opened date",
            "example": "2024-05-15T14:30:00.000Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "fail",
              "error"
            ],
            "description": "Error status (fail = client error, error = server error)",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Something went wrong"
          }
        }
      }
    }
  },
  "paths": {
    "/api/auth/check-username": {
      "post": {
        "summary": "Check username availability",
        "description": "Checks if a username is available for registration",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "description": "Username to check (letters, numbers, underscores only)",
                    "example": "john_doe123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Username availability check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "True if username is available, false if taken",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation Error",
                      "example": "Validation failed: Only letters, numbers, underscores allowed"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "schema": null,
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Database error while checking username availability"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/check-email": {
      "post": {
        "summary": "Check email availability",
        "description": "Checks if an email address is available for registration",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address to check",
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email availability check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "True if email is available, false if taken",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation Error",
                      "example": "Validation failed: email: Invalid email"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "schema": null,
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error Status",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Database error while checking email availability"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with username, optional email, and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "description": "Unique username (letters, numbers, underscores only)",
                    "example": "john_doe123"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Optional email address",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 100,
                    "description": "User password",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "username": {
                          "type": "string",
                          "example": "john_doe123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "nullable": true,
                          "example": "john.doe@example.com"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-05-01T10:30:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or username/email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user with username/email and password, returns JWT token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "usernameOrEmail",
                  "password"
                ],
                "properties": {
                  "usernameOrEmail": {
                    "type": "string",
                    "description": "Username or email address",
                    "example": "john_doe123"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 100,
                    "description": "User password",
                    "example": "SecurePassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successfullll",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT authentication token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "username": {
                          "type": "string",
                          "example": "john_doe123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "summary": "Get user profile",
        "description": "Retrieves the authenticated user's profile information",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "User's unique identifier",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "username": {
                      "type": "string",
                      "maxLength": 20,
                      "description": "User's username",
                      "example": "john_doe123"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "maxLength": 255,
                      "description": "User's email address (optional)",
                      "example": "john.doe@example.com"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account creation timestamp",
                      "example": "2024-05-01T10:30:00.000Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last profile update timestamp",
                      "example": "2024-05-15T14:20:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error retrieving profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards": {
      "get": {
        "summary": "Alle Karten mit erweiterten Filter- und Sortieroptionen abrufen",
        "description": "Durchsucht alle Karten systemweit mit verschiedenen Filteroptionen",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "folderId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter nach spezifischem Ordner"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "Filter nach Tags (kommagetrennt)",
            "example": "javascript,frontend"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Filter nach Titel (partielle Übereinstimmung)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Anzahl der Karten pro Seite"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Anzahl der zu überspringenden Karten für Paginierung"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "currentLearningLevel"
              ]
            },
            "description": "Feld nach dem sortiert werden soll"
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sortierreihenfolge"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste der gefilterten Karten",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Card"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Neue Karte erstellen",
        "description": "Erstellt eine neue Karteikarte und ordnet sie einem Ordner zu",
        "tags": [
          "Cards"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "question",
                  "answer",
                  "folderId"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Titel der Karte",
                    "example": "JavaScript Closures"
                  },
                  "question": {
                    "type": "string",
                    "description": "Frage auf der Vorderseite",
                    "example": "Was ist ein Closure in JavaScript?"
                  },
                  "answer": {
                    "type": "string",
                    "description": "Antwort auf der Rückseite",
                    "example": "Ein Closure ist eine Funktion, die Zugriff auf Variablen aus ihrem äußeren Scope hat..."
                  },
                  "folderId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID des zugehörigen Ordners"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags zur Kategorisierung",
                    "example": [
                      "javascript",
                      "closures",
                      "functions"
                    ]
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "default": 1,
                    "description": "Aktuelles Lernniveau (1-5)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Karte erfolgreich erstellt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Eingabedaten",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards/{id}": {
      "get": {
        "summary": "Einzelne Karte abrufen",
        "description": "Lädt eine spezifische Karte anhand ihrer ID",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Eindeutige ID der Karte"
          }
        ],
        "responses": {
          "200": {
            "description": "Karte erfolgreich geladen",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Karte nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Karte aktualisieren",
        "description": "Aktualisiert eine bestehende Karte (partielle Updates möglich)",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Eindeutige ID der Karte"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Neuer Titel der Karte"
                  },
                  "question": {
                    "type": "string",
                    "description": "Neue Frage"
                  },
                  "answer": {
                    "type": "string",
                    "description": "Neue Antwort"
                  },
                  "folderId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Neue Ordner-ID"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Neue Tags"
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Neues Lernniveau"
                  }
                },
                "example": {
                  "title": "JavaScript Closures - Erweitert",
                  "currentLearningLevel": 3,
                  "tags": [
                    "javascript",
                    "closures",
                    "advanced"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Karte erfolgreich aktualisiert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Eingabedaten",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Karte nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Karte löschen",
        "description": "Löscht eine Karte dauerhaft aus dem System",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Eindeutige ID der zu löschenden Karte"
          }
        ],
        "responses": {
          "204": {
            "description": "Karte erfolgreich gelöscht"
          },
          "404": {
            "description": "Karte nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders": {
      "get": {
        "summary": "Alle Ordner mit Paginierung abrufen",
        "description": "Lädt alle verfügbaren Ordner mit optionaler Paginierung",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Anzahl der Ordner pro Seite"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Anzahl der zu überspringenden Ordner für Paginierung"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste aller Ordner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Neuen Ordner erstellen",
        "description": "Erstellt einen neuen Ordner (kann auch Unterordner sein)",
        "tags": [
          "Folders"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name des Ordners",
                    "example": "JavaScript Grundlagen"
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID des übergeordneten Ordners (optional für Unterordner)",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ordner erfolgreich erstellt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folder": {
                          "$ref": "#/components/schemas/Folder"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Eingabedaten",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Übergeordneter Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/search": {
      "get": {
        "summary": "Ordner nach Name durchsuchen",
        "description": "Sucht Ordner basierend auf dem Namen (partielle Übereinstimmung)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Suchbegriff für Ordnername",
            "example": "JavaScript"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Anzahl der Suchergebnisse pro Seite"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Anzahl der zu überspringenden Ergebnisse"
          }
        ],
        "responses": {
          "200": {
            "description": "Suchergebnisse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Suchbegriff fehlt oder ungültige Parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/root": {
      "get": {
        "summary": "Alle Hauptordner abrufen",
        "description": "Lädt alle Ordner ohne übergeordneten Ordner (Hauptebene)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Anzahl der Ordner pro Seite"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Anzahl der zu überspringenden Ordner"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste der Hauptordner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}": {
      "get": {
        "summary": "Einzelnen Ordner abrufen",
        "description": "Lädt einen spezifischen Ordner anhand seiner ID",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Eindeutige ID des Ordners"
          }
        ],
        "responses": {
          "200": {
            "description": "Ordner erfolgreich geladen",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folder": {
                          "$ref": "#/components/schemas/Folder"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Ordner aktualisieren",
        "description": "Aktualisiert einen bestehenden Ordner (partielle Updates möglich)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Eindeutige ID des Ordners"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Neuer Name des Ordners"
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Neue übergeordnete Ordner-ID",
                    "nullable": true
                  }
                },
                "example": {
                  "name": "JavaScript Fortgeschritten",
                  "parentId": null
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ordner erfolgreich aktualisiert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folder": {
                          "$ref": "#/components/schemas/Folder"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Eingabedaten",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Ordner löschen",
        "description": "Löscht einen Ordner dauerhaft (kaskadiert zu allen enthaltenen Karten)",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Eindeutige ID des zu löschenden Ordners"
          }
        ],
        "responses": {
          "204": {
            "description": "Ordner erfolgreich gelöscht"
          },
          "404": {
            "description": "Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/children": {
      "get": {
        "summary": "Unterordner abrufen",
        "description": "Lädt alle direkten Unterordner eines spezifischen Ordners",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID des übergeordneten Ordners"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Anzahl der Unterordner pro Seite"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Anzahl der zu überspringenden Unterordner"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste der Unterordner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "folders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Übergeordneter Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/cards": {
      "get": {
        "summary": "Alle Karten in einem Ordner abrufen",
        "description": "Lädt alle Karteikarten, die einem spezifischen Ordner zugeordnet sind",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID des Ordners"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Anzahl der Karten pro Seite"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Anzahl der zu überspringenden Karten"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste der Karten im Ordner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Card"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Neue Karte in einem Ordner erstellen",
        "description": "Erstellt eine neue Karteikarte und ordnet sie automatisch dem angegebenen Ordner zu",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID des Ordners, dem die Karte zugeordnet wird"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "question",
                  "answer"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Titel der Karte",
                    "example": "React Hooks"
                  },
                  "question": {
                    "type": "string",
                    "description": "Frage auf der Vorderseite",
                    "example": "Was ist der Unterschied zwischen useState und useEffect?"
                  },
                  "answer": {
                    "type": "string",
                    "description": "Antwort auf der Rückseite",
                    "example": "useState verwaltet lokalen State, useEffect führt Seiteneffekte aus..."
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags zur Kategorisierung",
                    "example": [
                      "react",
                      "hooks",
                      "frontend"
                    ]
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "default": 1,
                    "description": "Aktuelles Lernniveau (1-5)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Karte erfolgreich im Ordner erstellt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Eingabedaten",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ordner nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}/cards/{cardId}": {
      "put": {
        "summary": "Karte in einem Ordner aktualisieren",
        "description": "Aktualisiert eine Karte und validiert, dass sie zum angegebenen Ordner gehört",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID des Ordners"
          },
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID der zu aktualisierenden Karte"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Neuer Titel der Karte"
                  },
                  "question": {
                    "type": "string",
                    "description": "Neue Frage"
                  },
                  "answer": {
                    "type": "string",
                    "description": "Neue Antwort"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Neue Tags"
                  },
                  "currentLearningLevel": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Neues Lernniveau"
                  }
                },
                "example": {
                  "title": "React Hooks - Erweitert",
                  "currentLearningLevel": 3,
                  "tags": [
                    "react",
                    "hooks",
                    "advanced"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Karte erfolgreich aktualisiert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "card": {
                          "$ref": "#/components/schemas/Card"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ungültige Eingabedaten oder Karte gehört nicht zum Ordner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ordner oder Karte nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Karte aus einem Ordner löschen",
        "description": "Löscht eine Karte und validiert, dass sie zum angegebenen Ordner gehört",
        "tags": [
          "Folders",
          "Cards"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID des Ordners"
          },
          {
            "in": "path",
            "name": "cardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID der zu löschenden Karte"
          }
        ],
        "responses": {
          "204": {
            "description": "Karte erfolgreich gelöscht"
          },
          "400": {
            "description": "Karte gehört nicht zum angegebenen Ordner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ordner oder Karte nicht gefunden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}